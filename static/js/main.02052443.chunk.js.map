{"version":3,"sources":["metaInfo.js","styles.js","components/Header.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Info","person","firstName","lastName","phoneNumber","imageSrc","title","description","pages","pageName","content","colors","header","info","headerInfo","padding","backgroundColor","position","marginLeft","float","overflow","verticalAlign","display","headerImage","width","textAlign","Header","props","componentDidMount","window","addEventListener","changeDividerMargin","callback","dividerMarginState","metaInfo","height","img","Image","onload","scale","this","src","imageWidth","setState","dividerMargin","innerWidth","updateDivider","event","windowWidth","mousePosX","clientX","state","dividerX","Math","max","min","classes","onMouseMove","style","className","Container","alt","React","Component","withStyles","Main","App","headerHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAkCeA,EAlCF,CACTC,OAAQ,CACJC,UAAW,SACXC,SAAU,WACVC,YAAa,eACbC,SAAU,uDACVC,MAAM,yDACNC,YAAa,gQAEjBC,MAAO,CACH,CACIC,SAAS,YACTC,QAAQ,CACJJ,MAAM,cAGd,CACIG,SAAS,kBACTC,QAAQ,4BAEZ,CACID,SAAS,SACTC,QAAQ,2BAEZ,CACID,SAAS,WACTC,QAAQ,kBAGhBC,OAAO,CACHC,OAAQ,Y,gBC7BTD,EAAUE,EAAVF,OACQ,GACXG,WAAY,CACRC,QAAQ,EACRC,gBAAgBL,EAAOC,OACvBK,SAAS,WACTC,WAAW,EACXC,MAAM,OACNC,SAAU,SACV,iBAAkB,CACdL,QAAS,GACTM,cAAc,SACdC,QAAS,eAGjBC,YAAa,CACTC,MAAM,OACNN,WAAW,EACXO,UAAU,QACVT,gBAAiBL,EAAOC,OACxBQ,SAAS,WCfXM,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,kBAAoB,WAChBC,OAAOC,iBAAiB,SAAU,EAAKC,qBACvC,EAAKA,uBAVU,EAenBA,oBAAsB,WAClB,IAAMC,EAAW,EAAKC,mBAEb5B,EADQ6B,EAAVjC,OACEI,SACA8B,EAAU,EAAKR,MAAfQ,OAELC,EAAM,IAAIC,MACdD,EAAIE,OAAS,WACT,IAAMC,EAAQJ,EAASK,KAAKL,OAC5BH,EAASQ,KAAKhB,MAAMe,IAExBH,EAAIK,IAAMpC,GA1BK,EA6BnB4B,mBAAqB,SAACS,GAClB,EAAKC,SAAS,CAACC,cAAgBf,OAAOgB,WAAaH,KA9BpC,EAkCnBI,cAAgB,SAACC,GACP,IAAAC,EAAcnB,OAAOgB,WACvBI,EAAYF,EAAMG,QACjBN,EAAiB,EAAKO,MAAtBP,cACCQ,EAAWC,KAAKC,IAAKD,KAAKE,IAAKN,EAAYD,GAAeJ,GAChE,EAAKD,SAAS,CAACS,cArCf,EAAKD,MAAQ,CACTC,SAAU,MACVR,cAAe,KAJJ,E,qDA0CT,IAAD,EACqBJ,KAAKb,MAAxB6B,EADF,EACEA,QAASrB,EADX,EACWA,OACTlC,EAAUiC,EAAVjC,OACP,OACI,oCACQ,yBAAKwD,YAAajB,KAAKM,cAAeY,MAAO,CAACvB,OAAQA,IAClD,yBAAKwB,UAAWH,EAAQ1C,WAAY4C,MAAO,CAAClC,MAAMgB,KAAKW,MAAMC,SAAUjB,OAAQA,IAC3E,kBAACyB,EAAA,EAAD,CAAWF,MAAO,CAACvB,OAAQA,IACvB,4BAAKlC,EAAOC,UAAZ,IAAwBD,EAAOE,UAC/B,6BACA,4BAAKF,EAAOK,SAGpB,yBAAKqD,UAAWH,EAAQjC,YAAamC,MAAO,CAACvB,OAAQA,IACjD,yBAAKM,IAAKxC,EAAOI,SAAU8B,OAAQA,EAAQ0B,IAAK,sB,GAzDvDC,IAAMC,WAiEZC,cAAWN,EAAXM,CAAkBtC,GCxDlBuC,E,uKATP,OACI,oCACI,kBAAC,EAAD,CAAQ9B,OAAQ,W,GANb2B,IAAMC,W,MCUVG,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAMQ,aAAc,QCKNC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02052443.chunk.js","sourcesContent":["const Info = {\r\n    person: {\r\n        firstName: \"Andree\",\r\n        lastName: \"Hultgren\",\r\n        phoneNumber: \"+46736544491\",\r\n        imageSrc: \"https://wallpaperplay.com/walls/full/c/5/3/34778.jpg\",\r\n        title:\"Electrical engineer with a masters in Machine Learning\",\r\n        description: \"I love complicated things. I am stubborn, therefore I find solutions. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas eleifend dictum volutpat. Cras sed ultricies ipsum. In vulputate leo eget sem aliquet, quis aliquet enim fringilla. \"\r\n    },\r\n    pages: [\r\n        {\r\n            pageName:\"Education\",\r\n            content:{\r\n                title:\"Education\",\r\n            }\r\n        },\r\n        {\r\n            pageName:\"Work Experience\",\r\n            content:\"Detta har jag jobbat med\"\r\n        },\r\n        {\r\n            pageName:\"Skills\",\r\n            content:\"Detta Ã¤r mina skillz\"\r\n        },\r\n        {\r\n            pageName:\"Examples\",\r\n            content:\"Arbetsexampel\"\r\n        }\r\n    ],\r\n    colors:{\r\n        header: \"#EDEDED\"\r\n    }\r\n\r\n}\r\nexport default Info","import info from \"./metaInfo\"\r\nconst {colors} = info;\r\nexport default {\r\n    headerInfo: {\r\n        padding:0, \r\n        backgroundColor:colors.header, \r\n        position:\"absolute\", \r\n        marginLeft:0, \r\n        float:\"left\", \r\n        overflow: \"hidden\",\r\n        \"& > .container\": {\r\n            padding: 30, \r\n            verticalAlign:\"middle\", \r\n            display: \"table-cell\", \r\n        }\r\n    },\r\n    headerImage: {\r\n        width:\"100%\", \r\n        marginLeft:0, \r\n        textAlign:\"right\", \r\n        backgroundColor: colors.header, \r\n        overflow:\"hidden\"\r\n    }\r\n}","import React from 'react';\r\nimport metaInfo from '../metaInfo';\r\nimport Container from 'react-bootstrap/Container'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport style from '../styles'\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            dividerX: \"50%\",\r\n            dividerMargin: 220\r\n        };\r\n       }\r\n\r\n    componentDidMount = () => {\r\n        window.addEventListener('resize', this.changeDividerMargin);\r\n        this.changeDividerMargin()\r\n\r\n        \r\n    }\r\n\r\n    changeDividerMargin = () => {\r\n        const callback = this.dividerMarginState\r\n        const {person} = metaInfo,\r\n                {imageSrc} = person,\r\n                {height} = this.props;\r\n        \r\n        var img = new Image();\r\n        img.onload = function(){\r\n            const scale = height / this.height;\r\n            callback(this.width*scale)\r\n        };\r\n        img.src = imageSrc;\r\n    }\r\n\r\n    dividerMarginState = (imageWidth) => {\r\n        this.setState({dividerMargin: (window.innerWidth - imageWidth)})\r\n\r\n    }\r\n\r\n    updateDivider = (event) => {\r\n        const windowWidth = window.innerWidth,\r\n            mousePosX = event.clientX,\r\n            {dividerMargin} = this.state;\r\n        const dividerX = Math.max( Math.min( mousePosX , windowWidth ), dividerMargin)\r\n        this.setState({dividerX})\r\n    }\r\n\r\n    render() {\r\n        const {classes, height} = this.props\r\n        const {person} = metaInfo\r\n        return(\r\n            <>\r\n                    <div onMouseMove={this.updateDivider} style={{height: height}} >\r\n                        <div className={classes.headerInfo} style={{width:this.state.dividerX, height: height}}>\r\n                            <Container style={{height: height}}>\r\n                                <h1>{person.firstName} {person.lastName}</h1>\r\n                                <hr/>\r\n                                <h5>{person.title}</h5>\r\n                            </Container>\r\n                        </div>\r\n                        <div className={classes.headerImage} style={{height: height}}>\r\n                            <img src={person.imageSrc} height={height} alt={\"Background\"}/>\r\n                        </div>\r\n                    </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(style)(Header)","import React from 'react';\r\nimport Header from './Header'\r\nclass Main extends React.Component {\r\n    \r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <Header height={500}/>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport Main from \"./components/main\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main headerHeight={500}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}